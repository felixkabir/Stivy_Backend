// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  created_at    DateTime       @default(now())
  username      String
  file_url      String?
  file_key      String?
  email         String         @unique
  password      String
  online_status Boolean?       @default(false)
  interests     UserInterest[]
  agencies      Agency[]

  model_entity                 ModelEntity?
  Post                  Post[]
  event_entity                 EventEntity[]
  createdNotifications  Notification[] @relation(name: "Creator")
  receivedNotifications Notification[] @relation(name: "CreatedFor")
}

model ModelEntity {
  id      String @id @default(uuid())
  name    String
  height  String
  waist   String
  shoes   String
  contact String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
  Post   Post[]

  agencyId String?
  agency   Agency? @relation(references: [id], fields: [agencyId], onDelete: Cascade)
  file_entity     FileEntity[]
}

model Agency {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())

  name     String
  file_url String?
  file_key String?
  contact  String

  userId  String
  creator User    @relation(references: [id], fields: [userId], onDelete: Cascade)
  Post    Post[]
  models   ModelEntity[]
}

model Interest {
  id         String         @id @default(uuid())
  created_at DateTime       @default(now())
  name       String
  users      UserInterest[]
}

model UserInterest {
  userId     String
  interestId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  interest   Interest @relation(fields: [interestId], references: [id], onDelete: Cascade)

  @@id([userId, interestId]) // Chave prim√°ria composta
}

model EventEntity {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  name       String

  file_url String?
  file_key String?

  start_date DateTime
  end_date   DateTime

  userId String
  user   User   @relation(references: [id], fields: [userId])
}

model Post {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())

  content String?
  type    String?

  userId   String?
  agencyId String?
  modelId  String?

  user   User?   @relation(references: [id], fields: [userId])
  agency Agency? @relation(references: [id], fields: [agencyId])
  model_entity  ModelEntity?  @relation(references: [id], fields: [modelId])
  file_entity   FileEntity[]
}

model Notification {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  content    String
  is_readed  Boolean  @default(false)

  creatorId String
  creator   User   @relation(name: "Creator", references: [id], fields: [creatorId])

  createdForId String
  createdFor   User   @relation(name: "CreatedFor", references: [id], fields: [createdForId])
}

model FileEntity {
  id       String @id @default(uuid())
  file_url String
  file_key String

  modelId String?
  model   ModelEntity?  @relation(references: [id], fields: [modelId], onDelete: Cascade)

  postId String?
  post   Post?   @relation(references: [id], fields: [postId], onDelete: Cascade)
}
